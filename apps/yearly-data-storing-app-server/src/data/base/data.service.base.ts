/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Data as PrismaData,
  Metadata as PrismaMetadata,
} from "@prisma/client";

export class DataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DataCountArgs, "select">): Promise<number> {
    return this.prisma.data.count(args);
  }

  async dataItems(args: Prisma.DataFindManyArgs): Promise<PrismaData[]> {
    return this.prisma.data.findMany(args);
  }
  async data(args: Prisma.DataFindUniqueArgs): Promise<PrismaData | null> {
    return this.prisma.data.findUnique(args);
  }
  async createData(args: Prisma.DataCreateArgs): Promise<PrismaData> {
    return this.prisma.data.create(args);
  }
  async updateData(args: Prisma.DataUpdateArgs): Promise<PrismaData> {
    return this.prisma.data.update(args);
  }
  async deleteData(args: Prisma.DataDeleteArgs): Promise<PrismaData> {
    return this.prisma.data.delete(args);
  }

  async getMetadata(parentId: string): Promise<PrismaMetadata | null> {
    return this.prisma.data
      .findUnique({
        where: { id: parentId },
      })
      .metadata();
  }
}
